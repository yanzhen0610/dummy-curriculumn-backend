type Mutation {
    # authentication
    authenticate(credentials: UserCredentialsInput!): Authorization!
        @field(
            resolver: "App\\GraphQL\\Mutations\\AuthorizationMutator@authenticate"
        )
    refresh_authorization: Authorization!
        @field(
            resolver: "App\\GraphQL\\Mutations\\AuthorizationMutator@refresh"
        )
        @middleware(checks: ["auth:api"])

    # college
    create_college(college: CollegeInput!): College!
        @field(resolver: "App\\GraphQL\\Mutations\\CollegeMutator@create")
        @middleware(checks: ["auth:api", "permission.administrator"])
    update_college(uuid: String!, college: CollegeInput!): College!
        @field(resolver: "App\\GraphQL\\Mutations\\CollegeMutator@update")
        @middleware(checks: ["auth:api", "permission.administrator"])
    delete_college(uuid: String!): Void
        @field(resolver: "App\\GraphQL\\Mutations\\CollegeMutator@delete")
        @middleware(checks: ["auth:api", "permission.administrator"])

    # department
    create_department(department: DepartmentInput!): Department!
        @field(resolver: "App\\GraphQL\\Mutations\\DepartmentMutator@create")
        @middleware(checks: ["auth:api", "permission.administrator"])
    update_department(uuid: String!, department: DepartmentInput!): Department!
        @field(resolver: "App\\GraphQL\\Mutations\\DepartmentMutator@update")
        @middleware(checks: ["auth:api", "permission.administrator"])
    delete_department(uuid: String!): Void
        @field(resolver: "App\\GraphQL\\Mutations\\DepartmentMutator@delete")
        @middleware(checks: ["auth:api", "permission.administrator"])

    # user
    create_user(user: UserInput!): User!
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@create")
        @middleware(checks: ["auth:api", "permission.administrator"])
    update_user(uuid: String!, user: UserInput!): User!
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@update")
        @middleware(checks: ["auth:api", "permission.administrator"])
    delete_user(uuid: String!): Void
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@delete")
        @middleware(checks: ["auth:api", "permission.administrator"])

    # administrator
    create_administrator(administrator: AdministratorInput!): Administrator!
        @field(resolver: "App\\GraphQL\\Mutations\\AdministratorMutator@create")
        @middleware(checks: ["auth:api", "permission.administrator"])
    update_administrator(
        uuid: String!
        administrator: AdministratorInput!
    ): Administrator!
        @field(resolver: "App\\GraphQL\\Mutations\\AdministratorMutator@update")
        @middleware(checks: ["auth:api", "permission.administrator"])
    delete_administrator(uuid: String!): Void
        @field(resolver: "App\\GraphQL\\Mutations\\AdministratorMutator@delete")
        @middleware(checks: ["auth:api", "permission.administrator"])

    # teacher
    create_teacher(teacher: TeacherInput!): Teacher!
        @field(resolver: "App\\GraphQL\\Mutations\\TeacherMutator@create")
        @middleware(checks: ["auth:api", "permission.administrator"])
    update_teacher(uuid: String!, teacher: TeacherInput!): Teacher!
        @field(resolver: "App\\GraphQL\\Mutations\\TeacherMutator@update")
        @middleware(checks: ["auth:api", "permission.administrator"])
    delete_teacher(uuid: String!): Void
        @field(resolver: "App\\GraphQL\\Mutations\\TeacherMutator@delete")
        @middleware(checks: ["auth:api", "permission.administrator"])

    # student
    create_student(student: StudentInput!): Student!
        @field(resolver: "App\\GraphQL\\Mutations\\StudentMutator@create")
        @middleware(checks: ["auth:api", "permission.administrator"])
    update_student(uuid: String!, student: StudentInput!): Student!
        @field(resolver: "App\\GraphQL\\Mutations\\StudentMutator@update")
        @middleware(checks: ["auth:api", "permission.administrator"])
    delete_student(uuid: String!): Void
        @field(resolver: "App\\GraphQL\\Mutations\\StudentMutator@delete")
        @middleware(checks: ["auth:api", "permission.administrator"])
}
